// Generated by CoffeeScript 1.9.1
(function() {
  var assert, compose, curry, deep_equal, describe, ref, ref1,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require("./helpers"), describe = ref.describe, assert = ref.assert;

  ref1 = require("./core"), compose = ref1.compose, curry = ref1.curry;

  deep_equal = require("./type").deep_equal;

  describe("Object functions", function(context) {
    var bind, clone, delegate, detach, extend, has, include, is_object, keys, merge, negate, omit, pairs, pick, properties, property, query, values;
    include = extend = function() {
      var i, key, len, mixin, mixins, object, value;
      object = arguments[0], mixins = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (i = 0, len = mixins.length; i < len; i++) {
        mixin = mixins[i];
        for (key in mixin) {
          value = mixin[key];
          object[key] = value;
        }
      }
      return object;
    };
    context.test("include");
    merge = function() {
      var destination, i, k, len, object, objects, v;
      objects = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      destination = {};
      for (i = 0, len = objects.length; i < len; i++) {
        object = objects[i];
        for (k in object) {
          v = object[k];
          destination[k] = v;
        }
      }
      return destination;
    };
    context.test("merge");
    clone = function(object) {
      var _clone, flags, key;
      if ((object == null) || typeof object !== 'object') {
        return object;
      }
      if (object instanceof Date) {
        return new Date(object.getTime());
      }
      if (object instanceof RegExp) {
        flags = '';
        if (object.global != null) {
          flags += 'g';
        }
        if (object.ignoreCase != null) {
          flags += 'i';
        }
        if (object.multiline != null) {
          flags += 'm';
        }
        if (object.sticky != null) {
          flags += 'y';
        }
        return new RegExp(object.source, flags);
      }
      _clone = new object.constructor();
      for (key in object) {
        _clone[key] = clone(object[key]);
      }
      return _clone;
    };
    context.test("clone", function() {
      var is_clone, person;
      is_clone = function(original, copy) {
        assert.notEqual(original, copy);
        return assert.deepEqual(original, copy);
      };
      person = {
        name: "Steve Jobs",
        address: {
          street: "1 Infinite Loop",
          city: "Cupertino, CA",
          zip: 95014
        },
        birthdate: new Date('Feb 24, 1955'),
        regex: /foo.*/igm
      };
      return is_clone(person, clone(person));
    });
    property = curry(function(key, object) {
      return object[key];
    });
    context.test("property", function() {
      var a, baz_foo;
      a = {
        foo: 1,
        bar: 2,
        baz: {
          foo: 2
        }
      };
      assert((property("foo", a)) === 1);
      baz_foo = compose(property("foo"), property("baz"));
      return assert((baz_foo(a)) === 2);
    });
    delegate = function(from, to) {
      var name, results, value;
      results = [];
      for (name in to) {
        value = to[name];
        if ((type(value)) === "function") {
          results.push((function(value) {
            return from[name] = function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              return value.call.apply(value, [to].concat(slice.call(args)));
            };
          })(value));
        }
      }
      return results;
    };
    context.test("delegate");
    bind = curry(function(f, x) {
      return f.bind(x);
    });
    context.test("bind", function() {
      var trim;
      trim = bind(String.prototype.trim, "foo ");
      return assert(trim(), "foo");
    });
    detach = function(f) {
      return curry(function() {
        var args, x;
        x = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return f.apply(x, args);
      });
    };
    context.test("detach", function() {
      var trim;
      trim = detach(String.prototype.trim);
      return assert(trim("foo "), "foo");
    });
    properties = (function() {
      var defaults;
      defaults = {
        enumerable: true,
        configurable: true
      };
      return function(object, properties) {
        var key, results, value;
        results = [];
        for (key in properties) {
          value = properties[key];
          include(value, defaults);
          results.push(Object.defineProperty(object, key, value));
        }
        return results;
      };
    })();
    context.test("properties", function() {
      var A, a;
      A = (function() {
        function A() {}

        properties(A.prototype, {
          foo: {
            get: function() {
              return this._foo;
            },
            set: function(v) {
              return this._foo = v;
            }
          }
        });

        return A;

      })();
      a = new A;
      a.foo = "bar";
      assert(a.foo === "bar");
      return assert(a._foo != null);
    });
    has = curry(function(p, x) {
      return x[p] != null;
    });
    context.test("has", function() {
      return assert(has("a", {
        a: 1
      }));
    });
    keys = Object.keys;
    context.test("keys", function() {
      return assert((indexOf.call(keys({
        a: 1
      }), "a") >= 0));
    });
    values = function(x) {
      var k, results, v;
      results = [];
      for (k in x) {
        v = x[k];
        results.push(v);
      }
      return results;
    };
    context.test("values", function() {
      return assert((indexOf.call(values({
        a: 1
      }), 1) >= 0));
    });
    pairs = function(x) {
      var k, results, v;
      results = [];
      for (k in x) {
        v = x[k];
        results.push([k, v]);
      }
      return results;
    };
    context.test("pairs", function() {
      return assert(deep_equal(pairs({
        a: 1,
        b: 2,
        c: 3
      }), [["a", 1], ["b", 2], ["c", 3]]));
    });
    pick = function(f, x) {
      var k, r, v;
      r = {};
      for (k in x) {
        v = x[k];
        if (f(k, v)) {
          r[k] = v;
        }
      }
      return r;
    };
    context.test("pick", function() {
      return assert(deep_equal(pick((function(k, v) {
        return v != null;
      }), {
        a: 1,
        b: null,
        c: 3
      }), {
        a: 1,
        c: 3
      }));
    });
    negate = require("./logical").negate;
    omit = function(f, x) {
      return pick(negate(f), x);
    };
    context.test("omit", function() {
      return assert(deep_equal(omit((function(k, v) {
        return v != null;
      }), {
        a: 1,
        b: null,
        c: 3
      }), {
        b: null
      }));
    });
    is_object = require("./type").is_object;
    query = curry(function(example, target) {
      var k, v;
      if ((is_object(example)) && (is_object(target))) {
        for (k in example) {
          v = example[k];
          if (!query(v, target[k])) {
            return false;
          }
        }
        return true;
      } else {
        return deep_equal(example, target);
      }
    });
    context.test("query", function() {
      var snow_white;
      snow_white = {
        name: "Snow White",
        dwarves: 7,
        enemies: ["Evil Queen"]
      };
      assert(query({
        name: "Snow White"
      }, snow_white));
      assert(query({
        enemies: ["Evil Queen"]
      }, snow_white));
      assert(!query({
        name: "Sleeping Beauty"
      }, snow_white));
      return assert(!query({
        enemies: ["Maleficent"]
      }, snow_white));
    });
    return module.exports = {
      include: include,
      extend: extend,
      merge: merge,
      clone: clone,
      properties: properties,
      property: property,
      delegate: delegate,
      bind: bind,
      detach: detach,
      has: has,
      keys: keys,
      values: values,
      pairs: pairs,
      pick: pick,
      omit: omit,
      query: query
    };
  });

}).call(this);
