// Generated by CoffeeScript 1.9.1
(function() {
  var assert, async, call, curry, describe, promise, ref, ref1;

  ref = require("./helpers"), assert = ref.assert, describe = ref.describe;

  curry = require("./core").curry;

  promise = require("when");

  ref1 = (function() {
    var call, lift, ref1;
    ref1 = require("when/generator"), lift = ref1.lift, call = ref1.call;
    return {
      async: lift,
      call: call
    };
  })(), call = ref1.call, async = ref1.async;

  describe("Iterator functions", function(context) {
    var _foldr, _unzip, add, all, any, assoc, average, binary, cat, collect, compact, delimit, detach, each, first, flatten, flip, fold, foldr, is_function, is_iterable, is_iterator, is_value, iterate, iterator, join, last, leave, map, negate, partition, project, property, query, ref2, reject, repeat, sample, second, select, skip, sum, take, ternary, third, unzip, w, where, wrap, zip;
    is_iterable = function(x) {
      return x[Symbol.iterator] != null;
    };
    context.test("is_iterable", function() {
      return assert(is_iterable([1, 2, 3]));
    });
    is_iterator = function(x) {
      return (x != null ? x.next : void 0) != null;
    };
    is_function = require("./type").is_function;
    wrap = require("./core").wrap;
    iterator = function(x) {
      if (is_iterable(x)) {
        return x[Symbol.iterator]();
      } else if (is_iterator(x)) {
        return x;
      } else if ((is_function(x)) && (x.length === 0)) {
        return {
          next: x
        };
      } else {
        return {
          next: wrap(x)
        };
      }
    };
    context.test("is_iterator", function() {
      return assert(is_iterator(iterator([1, 2, 3])));
    });
    context.test("iterator", function() {
      return assert(is_function((iterator([1, 2, 3])).next));
    });
    iterate = function(x) {
      var f, i;
      i = iterator(x);
      f = async(function*() {
        var done, ref2, value;
        ref2 = i.next(), done = ref2.done, value = ref2.value;
        return {
          done: done,
          value: (yield promise(value))
        };
      });
      f[Symbol.iterator] = wrap(i);
      return f;
    };
    context.test("iterate", function*() {
      var i;
      i = iterate([1, 2, 3]);
      assert(is_iterable(i));
      assert(((yield i())).value === 1);
      assert(((yield i())).value === 2);
      assert(((yield i())).value === 3);
      return assert(((yield i())).done);
    });
    repeat = function(x) {
      return function() {
        return {
          done: false,
          value: x
        };
      };
    };
    collect = async(function*(i) {
      var done, ref2, result, value;
      i = iterate(i);
      done = false;
      result = [];
      while (!done) {
        ref2 = (yield i()), done = ref2.done, value = ref2.value;
        if (!done) {
          result.push(value);
        }
      }
      return result;
    });
    context.test("collect", function*() {
      var first;
      first = require("./array").first;
      return assert((first((yield collect([1, 2, 3, 4, 5])))) === 1);
    });
    each = async(function*(f, i) {
      var done, ref2, value;
      i = iterate(i);
      done = false;
      while (!done) {
        ref2 = (yield i()), done = ref2.done, value = ref2.value;
        if (!done) {
          f(value);
        }
      }
      return void 0;
    });
    map = curry(function(f, i) {
      i = iterate(i);
      return async(function*() {
        var done, ref2, value;
        ref2 = (yield i()), done = ref2.done, value = ref2.value;
        if (!done) {
          return {
            done: done,
            value: (yield promise(f(value)))
          };
        } else {
          return {
            done: done
          };
        }
      });
    });
    context.test("map", function() {
      var double, x;
      double = function(x) {
        return x * 2;
      };
      x = collect(map(double, [1, 2, 3]));
      return assert(x[1] === 4);
    });
    ternary = require("./core").ternary;
    fold = curry(ternary(async(function*(x, f, i) {
      var done, ref2, value;
      i = iterate(i);
      done = false;
      while (!done) {
        ref2 = (yield promise(i())), done = ref2.done, value = ref2.value;
        if (!done) {
          x = f(x, value);
        }
      }
      return x;
    })));
    add = require("./numeric").add;
    context.test("fold", function*() {
      return assert(((yield fold(0, add, [1, 2, 3, 4, 5]))) === 15);
    });
    flip = require("./core").flip;
    detach = require("./object").detach;
    _foldr = flip(ternary(detach(Array.prototype.reduceRight)));
    foldr = curry(ternary(async(function*(x, f, i) {
      return _foldr(x, f, (yield collect(iterate(i))));
    })));
    context.test("foldr", function*() {
      return assert(((yield foldr("", add, "panama"))) === "amanap");
    });
    select = curry(function(f, i) {
      var done;
      i = iterate(i);
      done = false;
      return async(function*() {
        var found, ref2, value;
        if (!done) {
          found = false;
          while (!(done || found)) {
            ref2 = (yield promise(i())), value = ref2.value, done = ref2.done;
            if (!done) {
              found = f(value);
            }
          }
          if (found) {
            return {
              done: done,
              value: value
            };
          } else {
            return {
              done: done
            };
          }
        } else {
          return {
            done: done
          };
        }
      });
    });
    context.test("select", function*() {
      var odd, second;
      second = require("./array").second;
      odd = require("./numeric").odd;
      return assert((second((yield collect(select(odd, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))))) === 3);
    });
    negate = require("./logical").negate;
    reject = curry(function(f, i) {
      return select(negate(f), i);
    });
    context.test("reject", function*() {
      var odd, second;
      second = require("./array").second;
      odd = require("./numeric").odd;
      return assert((second((yield collect(reject(odd, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))))) === 2);
    });
    binary = require("./core").binary;
    any = curry(binary(async(function*(f, i) {
      var done, found, ref2, value;
      i = iterate(i);
      done = false;
      found = false;
      while (!(done || found)) {
        ref2 = (yield promise(i())), done = ref2.done, value = ref2.value;
        if (!done) {
          found = f(value);
        }
      }
      return found;
    })));
    context.test("any", function*() {
      var count, odd, test;
      odd = require("./numeric").odd;
      count = 0;
      test = function(x) {
        count++;
        return odd(x);
      };
      assert((yield any(test, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])));
      return assert(count === 2);
    });
    all = curry(binary(async(function*(f, i) {
      return !(yield any(negate(f), i));
    })));
    context.test("all", function*() {
      var odd;
      odd = require("./numeric").odd;
      assert(!((yield all(odd, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))));
      return assert((yield all((function() {
        return true;
      }), "foobar")));
    });
    zip = function(i, j) {
      i = iterate(i);
      j = iterate(j);
      return async(function*() {
        var _i, _j;
        if ((_i = (yield i())).done || (_j = j()).done) {
          return {
            done: true
          };
        } else {
          return {
            done: false,
            value: [_i.value, _j.value]
          };
        }
      });
    };
    context.test("zip", function*() {
      var ref2, second, third;
      ref2 = require("./array"), second = ref2.second, third = ref2.third;
      return assert((second(third((yield collect(zip([1, 2, 3], [4, 5, 6])))))) === 6);
    });
    _unzip = function(arg, arg1) {
      var a, ax, b, bx;
      ax = arg[0], bx = arg[1];
      a = arg1[0], b = arg1[1];
      ax.push(a);
      bx.push(b);
      return [ax, bx];
    };
    unzip = function(i) {
      return fold([[], []], _unzip, i);
    };
    context.test("unzip", function() {
      var first, to_string;
      first = require("./array").first;
      to_string = require("./string").to_string;
      return assert((fold("", add, first(collect(unzip(zip("panama", "canary")))))) === "panama");
    });
    ref2 = require("./index"), first = ref2.first, second = ref2.second;
    assoc = async(function(i) {
      return (function*(i) {
        var done, ref3, result, value;
        result = {};
        while (!done) {
          ref3 = (yield i()), done = ref3.done, value = ref3.value;
          if (value != null) {
            result[first(value)] = second(value);
          }
        }
        return result;
      })(iterate(i));
    });
    context.test("assoc", function*() {
      return assert(((yield assoc([["foo", 1], ["bar", 2]]))).foo === 1);
    });
    property = require("./object").property;
    w = require("./string").w;
    project = curry(binary(async(function*(p, i) {
      return (yield map(property(p), i));
    })));
    third = require("./array").third;
    context.test("project", function() {
      return assert((third(collect(project("length", w("one two three"))))) === 5);
    });
    flatten = function(ax) {
      return fold([], (function(r, a) {
        if (a.forEach != null) {
          r.push.apply(r, flatten(a));
        } else {
          r.push(a);
        }
        return r;
      }), ax);
    };
    context.test("flatten", function() {
      return (function*(data) {
        return assert((second((yield flatten(data)))) === 2);
      })([1, [2, 3], 4, [5, [6, 7]]]);
    });
    is_value = require("./type").is_value;
    compact = select(is_value);
    context.test("compact", function() {
      return assert((second(collect(compact([1, null, null, 2])))) === 2);
    });
    partition = curry(function(n, i) {
      var done;
      i = iterate(i);
      done = false;
      return async(function*() {
        var batch, ref3, value;
        batch = [];
        while (!(done || batch.length === n)) {
          ref3 = (yield promise(i())), done = ref3.done, value = ref3.value;
          if (!done) {
            batch.push(value);
          }
        }
        if (done) {
          return {
            done: done
          };
        } else {
          return {
            value: batch,
            done: done
          };
        }
      });
    });
    context.test("partition", function() {
      var ref3;
      ref3 = require("./array"), first = ref3.first, second = ref3.second;
      return assert((first(second(collect(partition(2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))))) === 2);
    });
    take = curry(function(n, i) {
      var done;
      i = iterate(i);
      done = false;
      return async(function*() {
        var ref3, value;
        if (!(done || n-- === 0)) {
          ref3 = (yield promise(i())), done = ref3.done, value = ref3.value;
          if (done) {
            return {
              done: done
            };
          } else {
            return {
              done: done,
              value: value
            };
          }
        } else {
          done = true;
          return {
            done: done
          };
        }
      });
    });
    last = require("./array").last;
    context.test("take", function() {
      return assert((last(collect(take(3, [1, 2, 3, 4, 5])))) === 3);
    });
    leave = curry(binary(async(function*(n, i) {
      return ((yield collect(i))).slice(0, -n);
    })));
    context.test("leave", function() {
      return assert((last(leave(3, [1, 2, 3, 4, 5]))) === 2);
    });
    skip = curry(binary(async(function*(n, i) {
      return ((yield collect(i))).slice(n);
    })));
    context.test("skip", function() {
      return assert((first(skip(3, [1, 2, 3, 4, 5]))) === 4);
    });
    sample = curry(function(n, i) {
      var _sample;
      _sample = function() {
        return Math.random() < n;
      };
      return select(_sample, i);
    });
    context.test("sample");
    add = require("./numeric").add;
    sum = fold(0, add);
    context.test("sum", function() {
      return assert((sum([1, 2, 3, 4, 5])) === 15);
    });
    average = function(i) {
      var f, j;
      j = 0;
      f = function(r, n) {
        return r += (n - r) / ++j;
      };
      return fold(0, f, i);
    };
    context.test("average", function() {
      assert((average([1, 2, 3, 4, 5])) === 3);
      return assert((average([-5, -4, -3, -2, -1])) === -3);
    });
    cat = require("./array").cat;
    join = fold("", add);
    context.test("join", function() {
      w = require("./string").w;
      return assert((join(w("one two three"))) === "onetwothree");
    });
    delimit = curry(function(d, i) {
      var f;
      f = function(r, s) {
        if (r === "") {
          return r += s;
        } else {
          return r += d + s;
        }
      };
      return fold("", f, i);
    });
    context.test("delimit", function() {
      w = require("./string").w;
      return assert((delimit(", ", w("one two three"))) === "one, two, three");
    });
    query = require("./object").query;
    cat = require("./array").cat;
    where = curry(function(example, i) {
      return select(query(example), i);
    });
    context.test("where", function() {
      return assert((collect(where(["a", 1], zip(repeat("a"), [1, 2, 3, 1, 2, 3])))).length === 2);
    });
    return module.exports = {
      is_iterable: is_iterable,
      iterator: iterator,
      is_iterator: is_iterator,
      iterate: iterate,
      collect: collect,
      map: map,
      fold: fold,
      foldr: foldr,
      select: select,
      reject: reject,
      any: any,
      all: all,
      zip: zip,
      unzip: unzip,
      assoc: assoc,
      project: project,
      flatten: flatten,
      partition: partition,
      take: take,
      leave: leave,
      skip: skip,
      sample: sample,
      sum: sum,
      average: average,
      join: join,
      delimit: delimit,
      where: where,
      repeat: repeat
    };
  });

}).call(this);
