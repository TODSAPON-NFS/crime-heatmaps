// Generated by CoffeeScript 1.9.1
(function() {
  var assert, describe, ref;

  ref = require("./helpers"), describe = ref.describe, assert = ref.assert;

  describe("General functions", function(context) {
    var abort, curry, include, memoize, shell, sleep, timer, times;
    abort = function() {
      return process.exit(-1);
    };
    context.test("abort");
    memoize = (function(_hash) {
      _hash = function(x) {
        return x.toString();
      };
      return function(fn, hash, memo) {
        if (hash == null) {
          hash = _hash;
        }
        if (memo == null) {
          memo = {};
        }
        return function(x) {
          var name;
          return memo[name = hash(x)] != null ? memo[name] : memo[name] = fn(x);
        };
      };
    })(void 0);
    context.test("memoize");
    timer = function(wait, action) {
      var id;
      id = setTimeout(action, wait);
      return function() {
        return clearTimeout(id);
      };
    };
    context.test("timer");
    sleep = function(interval) {
      var promise;
      promise = require("when").promise;
      return promise(function(resolve, reject) {
        return timer(interval, function() {
          return resolve();
        });
      });
    };
    context.test("sleep");
    shell = function(command) {
      var exec, promise;
      promise = require("when").promise;
      exec = require("child_process").exec;
      return promise(function(resolve, reject) {
        return exec(command, function(error, stdout, stderr) {
          if (error) {
            return reject(error);
          } else {
            return resolve({
              stdout: stdout,
              stderr: stderr
            });
          }
        });
      });
    };
    context.test("shell", function*() {
      return assert(((yield shell("ls ./test"))).stdout.trim != null);
    });
    curry = require("./core").curry;
    times = curry(function(fn, n) {
      var results;
      results = [];
      while (n-- !== 0) {
        results.push(fn());
      }
      return results;
    });
    context.test("times", function() {
      return (function(n) {
        return assert((times((function() {
          return ++n;
        }), 3)).length === 3);
      })(0);
    });
    module.exports = {
      times: times,
      shell: shell,
      sleep: sleep,
      timer: timer,
      memoize: memoize,
      abort: abort
    };
    include = require("./object").include;
    include(module.exports, require("./core"));
    include(module.exports, require("./logical"));
    include(module.exports, require("./numeric"));
    include(module.exports, require("./type"));
    include(module.exports, require("./array"));
    include(module.exports, require("./iterator"));
    include(module.exports, require("./crypto"));
    include(module.exports, require("./fs"));
    include(module.exports, require("./object"));
    include(module.exports, require("./string"));
    return include(module.exports, require("./generator"));
  });

}).call(this);
